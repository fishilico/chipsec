name: Build Linux kernel module for many distributions

on: [push, pull_request]

jobs:
  build-linux-km:
    strategy:
      matrix:
        distro:
          - {name: "archlinux", tag: "latest"}
          - {name: "debian", tag: "10"}
          - {name: "debian", tag: "9"}
          - {name: "debian", tag: "8"}
          - {name: "debian", tag: "10"}
          - {name: "ubuntu", "20.10"}
          - {name: "ubuntu", "20.04"}
          - {name: "ubuntu", "19.10"}
          - {name: "ubuntu", "18.04"}
          - {name: "ubuntu", "16.04"}
    runs-on: ubuntu-20.04
    container:
      image: docker://docker.io/library/{{ matrix.distro.name }}:{{ matrix.distro.tag }}

    steps:
    - uses: actions/checkout@v2

    - name: Install Arch Linux dependencies
      if: matrix.distro.name == "archlinux"
      run: pacman -Syu --noconfirm dkms nasm

    - name: Install Debian and Ubuntu dependencies
      if: matrix.distro.name == "debian" || matrix.distro.name == "ubuntu"
      run: |
        apt-get update -q
        apt-get install -qqy dkms nasm

    - name: Compute packaged kernel version
      run: |
        KERNEL_VER=''
        if [ "{{ matrix.distro.name }}" = archlinux ] ; then
            KERNEL_VER="$(pacman -Qql linux-headers | sed -n 's:^/usr/lib/modules/\([^/]\+\)/.*:\1:p' | head -n 1)"
        elif [ "{{ matrix.distro.name }}" = debian ] ; then
            KERNEL_VER="$(LANG=C dpkg --status linux-headers-amd64 2>/dev/null | sed -n 's/^Depends: linux-headers-\(.*\)/\1/p' | head -n 1)"
        elif [ "{{ matrix.distro.name }}" = ubuntu ] ; then
            KERNEL_VER="$(LANG=C dpkg --status linux-headers-generic 2>/dev/null | sed -n 's/^Depends: linux-headers-\(.*\)/\1/p' | head -n 1)"
        fi
        if [ -z "${KERNEL_VER}" ] ; then
            echo >&2 "Error: no kernel package found"
            exit 1
        fi
        echo "Found packaged kernel ${KERNEL_VER}"
        echo "KERNEL_VER=$(KERNEL_VER)" >> "$GITHUB_ENV"

    - name: Build the driver with DKMS
      run: |
        CHIPSEC_MODULE_VER="$(cat chipsec/VERSION)"
        echo "Building chipsec ${CHIPSEC_MODULE_VER} for Linux kernel ${KERNEL_VER}"
        dkms add drivers/linux
        dkms install -m chipsec -v "${CHIPSEC_MODULE_VER}" -k "${KERNEL_VER}"

    - name: dkms status
      run: dkms status

    - name: Show modinfo on the kernel module
      run: |
        CHIPSEC_MODULE_VER="$(cat chipsec/VERSION)"
        MODULE="$(ls -1 "/var/lib/dkms/chipsec/${CHIPSEC_MODULE_VER}/${KERNEL_VER}/$(uname -m)/module/chipsec.ko.* | head -n1)"
        modinfo "${MODULE}"
