name: Test chipsec_main

on: [push, pull_request]

jobs:
  ubuntu-test:
    strategy:
      matrix:
        versions:
          - {ubuntu: 20.04, python: 3.9}
          - {ubuntu: 20.04, python: 3.8}
          - {ubuntu: 20.04, python: 3.7}
          - {ubuntu: 20.04, python: 2.7}

          - {ubuntu: 18.04, python: 3.7}
          - {ubuntu: 18.04, python: 2.7}

          - {ubuntu: 16.04, python: 3.7}
          - {ubuntu: 18.04, python: 2.7}
    runs-on: ubuntu-${{ matrix.versions.ubuntu }}

    steps:
    - name: Set up Python ${{ matrix.versions.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.versions.python }}

    - uses: actions/checkout@v2

    - name: Patch chipsec_main to return true even when some module failed
      run: |
        sed 's/^        return modules_failed$/        return 0/' -i chipsec_main.py

    - name: Install dependencies
      run: |
        sudo apt-get update -q
        sudo apt-get install -qqy dkms nasm

    - name: Build the driver with Python
      run: python setup.py build_ext -i

    - name: Build the driver with DKMS
      run: |
        KERNEL_VER="$(uname -r)"
        CHIPSEC_MODULE_VER="$(cat chipsec/VERSION)"
        echo "Building chipsec ${CHIPSEC_MODULE_VER} for Linux kernel ${KERNEL_VER}"
        sudo dkms add drivers/linux
        sudo dkms install -m chipsec -v "${CHIPSEC_MODULE_VER}" -k "${KERNEL_VER}"

    - name: Install chipsec
      run: sudo python setup.py install

    - name: Run chipsec_main
      run: sudo chipsec_main --ignore_platform

  windows-test:
    runs-on: windows-latest

    strategy:
      matrix:
        python:
          - 3.9
          - 3.8
          - 3.7

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    - name: Install dependencies
      shell: bash
      run: pip install pywin32

    - name: Build Windows driver
      shell: bash
      run: python3 setup.py build_ext -i

    - name: Upload Windows driver
      uses: actions/upload-artifact@v2
      with:
        name: drivers_win7_x64
        path: drivers/win7/x64

    #- name: Create a temporary self-signed certificate
    #  shell: pwsh
    #  run: |
    #    # Start-Process PowerShell.exe -Wait -ArgumentList '-ExecutionPolicy Bypass -Verb RunAs -File create-selfsigned-cert.ps1'  # FIXME does it need elevation?
    #    $cert = New-SelfSignedCertificate -Subject "CN=Chipsec" -Type CodeSigningCert -KeyExportPolicy Exportable -CertStoreLocation cert:\LocalMachine\My
    #    $CertPassword = ConvertTo-SecureString -String "MyP@ssw0rd.1" -Force -AsPlainText
    #    Export-PfxCertificate -Cert $cert -Password $CertPassword -FilePath ChipsecDriverCert.pfx
    #  working-directory: drivers/win7/sign

    #- name: Sign the driver
    #  shell: pwsh
    #  run: |
    #    Copy-Item -Path ..\x64\Debug\chipsec_hlpr.sys -Destination .
    #    SignTool sign /s ChipsecDriverCert.pfx /p MyP@ssw0rd.1 /t http://timestamp.verisign.com/scripts/timstamp.dll chipsec_hlpr.sys
    #  working-directory: drivers/win7/sign

    #- name: Upload Windows signed driver
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: drivers_win7_sign
    #    path: drivers/win7/sign

    - name: Install the driver signature certificate
      shell: pwsh
      run: |
        Import-Certificate -FilePath "drivers/win7/x64/Debug/chipsec_hlpr.cer" -CertStoreLocation "Cert:\LocalMachine\Root"

    - name: Install chipsec
      shell: bash
      run: python3 setup.py install

    #- name: Copy the signed driver to chipsec directory
    #  shell: bash
    #  run: cp -f drivers/win7/sign/chipsec_hlpr.sys drivers/win7/x64/chipsec_hlpr.sys  

    - name: Run chipsec_main
      shell: bash
      run: chipsec_main
